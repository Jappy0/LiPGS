# Define the input files and parameters
configfile: "config.yaml"

# Set the root directory based on the phenotype type (binary or continuous)
root_dir = "output_binary" if config["plink"]["pheno_type"] == "binary" else "output_alda"

rule all:
    input:
        f"{root_dir}/European_phenotype.txt",
        expand(f"{root_dir}/fold_data/discovery_{{fold}}.txt", fold=range(1, config["n_folds"]+1)),
        expand(f"{root_dir}/gwas_fold_{{fold}}.assoc", fold=range(1, config["n_folds"]+1)),
        expand(f"{root_dir}/plink_prs_fold_{{fold}}.txt", fold=range(1, config["n_folds"]+1)),
        f"{root_dir}/combined_prs.txt"

# Step 1: Create the root directory if it does not exist
rule create_root_dir:
    output:
        output_dir=directory(root_dir)
    shell:
        """
        mkdir -p {output.output_dir}
        """

# Step 2: Extract the phenotype according to the phenotype type (binary or continuous)
rule extract_phenotype:
    input:
        pheno_file=config["plink"]["pheno_file"]
    output:
        phenotype_data=f"{root_dir}/European_phenotype.txt"
    run:
        if config["plink"]["pheno_type"] == "binary":
            shell("""
                awk 'BEGIN {{FS="\t"; OFS="\t"}} NR==1 || $8 == "European" {{print $1, $2, $3+1}}' {input.pheno_file} > {output.phenotype_data}
            """)
        else:
            shell("""
                awk 'BEGIN {{FS="\t"; OFS="\t"}} NR==1 || $8 == "European" {{print $1, $2, $4}}' {input.pheno_file} > {output.phenotype_data}
            """)

genotype_prefix = config["plink"]["bfile"]

# Step 3: Use `split_data.py` to generate datasets for the 5-fold cross-validation
rule split_data:
    input:
        data=rules.extract_phenotype.output.phenotype_data
    output:
        discovery_files=expand(f"{root_dir}/fold_data/discovery_{{fold}}.txt", fold=range(1, config["n_folds"]+1)),
        # target_files=expand(f"{root_dir}/fold_data/target_{{fold}}.txt", fold=range(1, config["n_folds"]+1))
    shell:
        """
        python split_data.py --phenotype_file {input.data} --plink_prefix {genotype_prefix} --output_dir {root_dir}/fold_data --num_groups {config[n_folds]}
        """

# Step 4: Iteratively run GWAS for each fold using discovery data
rule run_gwas:
    input:
        bed_f=lambda wildcards: f"{root_dir}/fold_data/discovery_{wildcards.fold}.bed",
        bim_f=lambda wildcards: f"{root_dir}/fold_data/discovery_{wildcards.fold}.bim",
        fam_f=lambda wildcards: f"{root_dir}/fold_data/discovery_{wildcards.fold}.fam",
        pheno=lambda wildcards: f"{root_dir}/fold_data/discovery_{wildcards.fold}.txt",
        covar=config["plink"]["covar_file"]
    output:
        summary_stats=f"{root_dir}/gwas_fold_{{fold}}.assoc",  # No lambda needed here
        log=f"{root_dir}/gwas_fold_{{fold}}.log"  # No lambda needed here
    params:
        covar_name=config["plink"]["covar_name"]
    shell:
        """
        plink --bed {input.bed_f} \
              --bim {input.bim_f} \
              --fam {input.fam_f} \
              --pheno {input.pheno} \
              --covar {input.covar} \
              --covar-name {params.covar_name} \
              --allow-no-sex \
              --keep-allele-order \
              --real-ref-alleles \
              {("--logistic" if config["plink"]["pheno_type"] == "binary" else "--linear")} \
              --adjust \
              --all-pheno \
              --ci 0.95 \
              --make-bed \
              --out {wildcards.fold}_gwas
        """

# Step 5: Iteratively calculate PRS using PRScs with GWAS results
rule run_prscs:
    input:
        ref_dir=config["prscs"]["ref_dir"],
        summary_stats=lambda wildcards: f"{root_dir}/gwas_fold_{wildcards.fold}.assoc",
        bed_f=lambda wildcards: f"{root_dir}/fold_data/target_{wildcards.fold}.bed",
        bim_f=lambda wildcards: f"{root_dir}/fold_data/target_{wildcards.fold}.bim",
        fam_f=lambda wildcards: f"{root_dir}/fold_data/target_{wildcards.fold}.fam"
    output:
        prscs_output=f"{root_dir}/prs_fold_{{fold}}",  # No lambda needed here
        plink_score_output=f"{root_dir}/plink_prs_fold_{{fold}}.txt"  # No lambda needed here
    run:
        a2_file = f"{output.prscs_output}.a2"
        shell(f"""
            # Step 1: Add A2 to summary stats
            awk 'BEGIN {{FS="\t"; OFS="\t"}} {{if (NR==1) print $0, "A2"; else print $0, $5;}}' {input.summary_stats} > {a2_file}

            # Step 2: Run PRScs to calculate PRS
            python {config['prscs']['path']} \
                --ref_dir {input.ref_dir} \
                --bim_file {input.bim_f} \
                --sst_file {a2_file} \
                --n_gwas {config["prscs"]["n_gwas"]} \
                --out {output.prscs_output}

            # Step 3: Run PLINK to score the PRS
            plink --bed {input.bed_f} \
                  --bim {input.bim_f} \
                  --fam {input.fam_f} \
                  --score {output.prscs_output} 2 4 6 \
                  --out {output.plink_score_output}
        """)

# Step 6: Combine all PRS scores into a single output
rule combine_prs:
    input:
        expand(f"{root_dir}/plink_prs_fold_{{fold}}.txt", fold=range(1, config["n_folds"]+1))
    output:
        combined_prs=f"{root_dir}/combined_prs.txt"
    shell:
        """
        cat {input} > {output.combined_prs}
        """
